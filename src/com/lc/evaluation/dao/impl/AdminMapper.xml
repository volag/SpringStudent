<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lc.evaluation.dao.AdminMapper">
	<resultMap type="Admin" id="AdminResult">
		<result property="id" column="id" />
		<result property="userName" column="user_name" />
		<result property="password" column="password" />
		<result property="userType" column="user_type" />
		<result property="avatarPath" column="avatar_path" />
		<result property="birthday" column="birthday" />
		<result property="address" column="address" />
		<result property="phoneNum" column="phone_num" />
		<result property="realName" column="real_name" />
		<result property="sex" column="sex" />
	</resultMap>


	<select id="findByUserName" resultMap="AdminResult">
		select * from t_admin
		t1,t_user t2 where t1.id=t2.id and t2.user_name=#{userName}
	</select>

	<select id="findPasswordByUserName" resultType="java.lang.String">
		select password
		from t_user where user_name = #{userName}
	</select>

	<select id="findAllCount" resultType="Long">
		select count(*) from
		t_admin
	</select>

	<select id="findById" resultMap="AdminResult">
		select * from t_admin t1,t_user
		t2 where t1.id=t2.id and t1.id=#{id}
	</select>

	<select id="findAll" resultMap="AdminResult">
		select * from t_admin t1,t_user
		t2 where t1.id=t2.id
	</select>

	<insert id="add" parameterType="admin">
		insert into t_admin(id)
		values(#{id})
	</insert>

	<insert id="addAll">
		insert into t_admin(
		id)
		values
		<foreach collection="list" item="admin" separator=",">
			(#{admin.id})
		</foreach>
	</insert>

	<delete id="delete">
		delete from t_user
		where id in
		<foreach collection="list" open="(" close=")" separator=","
			item="id" index="i">
			#{id}
		</foreach>
	</delete>

	<update id="update" parameterType="admin">
		update t_admin
		<set>
			<if test="id != null and id !=''">
				id = #{id},
			</if>
		</set>
		where id = #{id}
	</update>


	<select id="findByMap"  parameterType="Map" resultMap="AdminResult">
		select * from t_admin t1,t_user t2 
		 <where> 
		   <if test="userName != null and userName !=''">
				and t2.user_name = #{userName}
			</if>
			<if test="password != null and password !=''">
				and t2.password = #{password}
			</if>
			<if test="avatarPath != null and avatarPath !=''">
				and t2.avatar_path = #{avatarPath}
			</if>
			<if test="userType != null and userType !=''">
				and t2.user_type = #{userType}
			</if>
			<if test="birthday != null and birthday !=''">
				and t2.birthday = #{birthday}
			</if>
			<if test="address != null and address !=''">
				and t2.address = #{address}
			</if>
			<if test="phoneNum != null and phoneNum !=''">
				and t2.phone_num = #{phoneNum}
			</if>
			<if test="realName != null and realName !=''">
				and t2.real_name = #{realName}
			</if>
			<if test="sex != null and sex !=''">
				and t2.sex = #{sex}
			</if> 
			and t1.id=t2.id 
		 	</where> 
	</select>
	
	
	<resultMap type="com.lc.evaluation.dto.response.AdminAssessAllResultDto" id="AdminAssessAllResultDto">
		<result property="teacherRealName" column="teacher_real_name" />
		<result property="teacherUserName" column="teacher_user_name" />
		<result property="teacherId" column="teacher_id" />
		<result property="courseNo" column="course_no" />
		<result property="courseId" column="course_id" />
		<result property="courseName" column="course_name" />
		<result property="clazzId" column="clazz_id" />
		<result property="avarage" column="average" />
	</resultMap>
	
	
	<select id="findAssessAllResult"  resultMap="AdminAssessAllResultDto">
	
			 select 
				tu.real_name teacher_real_name , 
				tu.user_name teacher_user_name, 
				tu.id teacher_id,  
				tcs.no course_no, 
				tcs.id course_id,
				tcs.name course_name , 
				ts.grade_id clazz_id , 
				Format(avg(ta.score),2) average 
				
				from t_core tc
	 
						join t_teacher tt on tt.id = tc.t_teacher_id
						join t_user tu on tu.id = tc.t_teacher_id
						join t_course tcs on tcs.id = tc.t_course_id  
						join t_student ts on ts.id = tc.t_student_id
						join t_assess ta on ta.id = tc.id
		 
							group by tc.t_teacher_id , tc.t_course_id , ts.grade_id
		 
	
	</select>

    <resultMap type="com.lc.evaluation.dto.response.AdminAssessAllAdviceDto" id="AdminAssessAllAdviceDto">
		<result property="teacherRealName" column="teacher_real_name" />
		<result property="teacherUserName" column="teacher_user_name" />
		<result property="studentRealName" column="student_real_name" />
		<result property="studentUserName" column="student_user_name" />
		<result property="courseName" column="course_name" />
		<result property="advice" column="advice" />
	</resultMap>
	
	
	<select id="findAssessAllAdvice"  resultMap="AdminAssessAllAdviceDto">
	
			 select 
				tu.real_name teacher_real_name, 
				tu.user_name teacher_user_name, 
				tp.real_name student_real_name, 
				tp.user_name student_user_name, 
				tcs.name course_name , 
                ta.advice advice				
				
				from t_core tc
	 
						join t_teacher tt on tt.id = tc.t_teacher_id
						join t_user tu on tu.id = tc.t_teacher_id
						join t_user tp on tp.id = tc.t_student_id
						join t_course tcs on tcs.id = tc.t_course_id  
						join t_student ts on ts.id = tc.t_student_id
						join t_assess ta on ta.id = tc.id
						
						where ta.advice is not null
	</select>
</mapper> 